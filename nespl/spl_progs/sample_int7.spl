// Set the MODE FLAG field in the process table to the system call number which is 5 for write system call.
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 5;

// 2 Store the value of user SP in a register as we need it for further computations.
alias userSP R0;
userSP = SP;


// 3 Switch the stack from user stack to kernel stack.

// Save the value of SP in the user SP field of Process Table entry of the process.
// Set the value of SP to beginning of the kernel stack.
// UTPR = SP
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
// SP = [user area page address ]
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

PTBR = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 14];

alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
alias fileDescriptor R4;


physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)]; 
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
fileDescriptor=[fileDescPhysicalAddr];


// If the file descriptor is not equal to -2, store -1 as a return value. According to system call convention, return value is stored at memory location userSP -1 in the user stack. Calculate physical address of the return value corresponding to userSP - 1 using address translation mechanism.

if (fileDescriptor != -2)
then
    //code when argument 1 is not valid
    alias physicalAddrRetVal R5;
    physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
    [physicalAddrRetVal] = -1;
else
    //code when argument 1 is valid
    alias word R5;
    word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
    print word;
    alias physicalAddrRetVal R6;
    physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
    [physicalAddrRetVal] = 0;

endif;

// 10 Outside the else block, set back the value of SP to point to top of user stack.
SP = userSP;

// 11 Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

// 12 Pass control back to the user program using the ireturn statement.
ireturn;

