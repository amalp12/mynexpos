alias functionNum R1;
alias processId R2;

if(functionNum == FREE_USER_AREA_PAGE) then
    alias userAreaPageNum R3;
    userAreaPageNum = [PROCESS_TABLE + processId * 16 + 11];
    // Free the user area page by invoking the Release Page function.
    multipush(R0, R1, R2);
    R1 = RELEASE_PAGE; 
    R2 = userAreaPageNum;
    call MOD_2; // Memory Manager 
    multipop(R0, R1, R2);
endif;

if(functionNum == EXIT_PROCESS) then
    // Invoke the Free Page Table function with same PID to deallocate the page table entries.
    multipush(R0, R1, R2);
    R1 = FREE_PAGE_TABLE;
    R2 = processId;
    call MOD_1;
    multipop(R0, R1, R2);


    // Invoke the Free user Area Page function with the same PID to free the user area page
    multipush(R0, R1, R2);
    R1 = FREE_USER_AREA_PAGE;
    R2 = processId;
    call MOD_1;
    multipop(R0, R1, R2);

    // Set the state of the process as TERMINATED and return to the caller.
    [PROCESS_TABLE + processId * 16 + 4] = TERMINATED;
endif;

if(functionNum == FREE_PAGE_TABLE) then
    // Invalidate the page table entries for the library pages by setting page number as -1 and auxiliary data as "0000" for each entry.
    alias ptbr R3;
    ptbr = [PROCESS_TABLE + processId * 16 + 14];
    [ptbr + 0] = -1;
    [ptbr + 1] = "0000";
    [ptbr + 2] = -1;
    [ptbr + 3] = "0000";

    // For each valid entry in the page table, release the page by invoking the Release Page function and invalidate the entry.
    alias ptlr R4;
    alias count R5;
    ptlr = [PROCESS_TABLE + processId * 16 + 15];
    count = 4;
    while(count < ptlr) do
        alias page R6;
        page = [ptbr + count * 2];
        if(page != -1) then
            multipush(R0, R1, R2, R3, R4, R5, R6);
            R1 = RELEASE_PAGE;
            R2 = page;
            call MOD_2;
            multipop(R0, R1, R2, R3, R4, R5, R6);
            [ptbr + count * 2] = -1;
            [ptbr + count * 2 + 1] = "0000";
        endif;
        count = count + 1;
    endwhile;


    // Go through the heap and stack entries in the disk map table of the process with given PID. If any valid entries are found, invoke the Release Blockfunction in the memory manager module.
    alias diskMapTableEntry R3;
    alias offset R5;
    diskMapTableEntry = [DISK_MAP_TABLE + processId * 10 ];
    offset = 2;
    while(offset < 10) do
        alias blockNum R4;
        blockNum = [diskMapTableEntry + offset];
        if(blockNum != -1) then
            multipush(R0, R1, R2, R3, R4, R5);
            R1 = RELEASE_BLOCK;
            R3 = processId;
            R2 = blockNum;
            call MOD_2;
            multipop(R0, R1, R2, R3, R4, R5);
            // Invalidate all the entries of the disk map table.
            [diskMapTableEntry + offset] = -1;
        endif;
        offset = offset + 1;
    endwhile;

endif;
    
return;