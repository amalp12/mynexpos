
alias userSP R1;
alias processTableEntryAddress R3;
processTableEntryAddress = PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16;
// Save the user stack pointer in the process table
[processTableEntryAddress + 13]= SP;

// switch to the kernel stack
SP = [processTableEntryAddress + 11] * 512  - 1 ;
PTBR = [processTableEntryAddress + 14] ;

userSP = [processTableEntryAddress + 13];

// Change the MODE FLAG in the process tableto the system call number.
[processTableEntryAddress + 9] = 15;

// Shutdown system call can be invoked only from the shell process of the root user. If the current process is not shell (PID in the process table is not equal to 1) or the current user is not root user (USERID in the process table is not equal to 1) then store -1 as return value, reset the MODE FLAG, change the stack to user stack and return to user mode.
if ([processTableEntryAddress + 1] != 1 || [processTableEntryAddress + 3] != 1) then
    
     //  return to the user mode with -1 stored as return value indicating failure.
    [[PTBR + 2*((userSP-1)/512)] * 512 + ((userSP-1)%512)] = -1;

    // At any point of return to user, remember to reset the MODE FLAG and change the stack to user stack.
    [processTableEntryAddress + 9] = 0;
    SP = [processTableEntryAddress + 13];
    ireturn;
endif;


// Commit the changes made in the memory copies of the inode table (along with user table), the root file and the disk free list by storing them back to the disk invoking the Disk Store function of device manager module . 
// Refer to disk/memory organization for block and page numbers of these data structures.
// DISK_STORE arguements PID, Page Number, Block Number	

//inode table
multipush(R1,R2);
R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 59;
R4 = 3;
call DEVICE_MANAGER;
multipop(R1,R2);

multipush(R1,R2);
R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 60;
R4 = 4;
call DEVICE_MANAGER;
multipop(R1,R2);

//root file
multipush(R1,R2);
R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 62;
R4 = 5;
call DEVICE_MANAGER;
multipop(R1,R2);

//disk free list
multipush(R1,R2);
R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 61;
R4 = 2;
call DEVICE_MANAGER;
multipop(R1,R2);



// Finally, halt the system using the SPL statement halt.
halt;