alias functionNum R1;
alias processId R2;

if(functionNum == GET_FREE_PAGE) then
    // Increment WAIT_MEM_COUNT field in the system status table. //Do not increment the WAIT_MEM_COUNT in busy loop (an important step )
    [SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3] + 1;
    while([SYSTEM_STATUS_TABLE+2] == 0)do
        // Set the state of the invoked process as WAIT_MEM.
        [PROCESS_TABLE+processId*16+4] = WAIT_MEM;
        multipush(R1,R2);    
        call SCHEDULER;
        multipop(R1,R2);
    endwhile;

    // Decrement the WAIT_MEM_COUNT field and MEM_FREE_COUNT field in the system status table. Note the sequence - increment WAIT_MEM_COUNT, waiting for the memory, decrement WAIT_MEM_COUNT.
    [SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2]  - 1;
    [SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3]  - 1;


    // Find a free page using memory free list and set the corresponding entry as 1. Make sure to store the obtained free page number in R0 as return value.
    alias freePage R3;
    alias count R4;
    freePage = MEMORY_FREE_LIST;
    count = 0;

    while(count < MAX_MEM_PAGE)do
        if([freePage] == 0)then
            [freePage] = 1;
            break;
        endif;
        freePage = freePage + 1;
        count = count + 1;
    endwhile; 

    if(count == MAX_MEM_PAGE)then
        freePage =-1;
    endif;
    R0=count;
    // R10 = "Page";
    // breakpoint;
    //Return to the caller.
    return;

endif;

if(functionNum ==  RELEASE_PAGE) then
    alias pageNumber R2;
    
    if([MEMORY_FREE_LIST+pageNumber] == 1) then
        // The Page number to be released is present in R2. Decrement the corresponding entry in the memory free list.
        [MEMORY_FREE_LIST+pageNumber] = 0;
        // If that entry in the memory free list becomes zero, then the page is free. So increment the MEM_FREE_COUNT in the system status table.
        [SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2] + 1;
    endif;

    // Update the STATUS to READY for all processes (with valid PID) which have STATUS as WAIT_MEM.
    alias processId R3;
    alias count R4;
    processId = 0;
    count = 0;
    while(count < 16)do
        if([PROCESS_TABLE+processId*16] != -1)then
            if([PROCESS_TABLE+processId*16+4] == WAIT_MEM)then
                [PROCESS_TABLE+processId*16+4] = READY;
            endif;
        endif;
        processId = processId + 1;
        count = count + 1;
    endwhile;
    // R10 = "List";
    // breakpoint;
    // Return to the caller.
    return;
endif;


