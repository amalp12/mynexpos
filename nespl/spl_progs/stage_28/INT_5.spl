// At the beginning of interrupt routine 14, extract the system call number from the user stack and switch to the kernel stack.
alias userSP R1;
alias systemCallNum R2;
alias processTableEntryAddress R3;

processTableEntryAddress = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE + 1]*16;
// Save the user stack pointer in the process table
[processTableEntryAddress + 13]= SP;

// switch to the kernel stack
SP = [processTableEntryAddress + 11] * 512  - 1 ;
PTBR = [processTableEntryAddress + 14] ;


userSP = [processTableEntryAddress + 13];
systemCallNum = [[PTBR + 2*((userSP-5)/512)] * 512 + ((userSP-5)%512)] ;

// Change the MODE FLAG in the process tableto the system call number.
[processTableEntryAddress + 9] = systemCallNum;



// Extract the filename/file decriptor from the user stack. 
alias arg1 R4;
arg1  = [[PTBR + 2*((userSP-4)/512)] * 512 + ((userSP-4)%512)] ;

alias returnAddress R5;
returnAddress = [PTBR + 2*((userSP-1)/512)] * 512 + ((userSP-1)%512) ;





if(systemCallNum == INT_OPEN) then //  Open
    alias fileName R4;

    //  Find a free Per-Process Resource Table entry.
    alias perProcessResouceTable R6;
    alias freeEntry R7;
    alias iter R8;
    perProcessResouceTable = [processTableEntryAddress + 11] * 512 + RESOURCE_TABLE_OFFSET;
    iter = 0;
    freeEntry = -1;

    // The Per-Process Resource Table has 8 entries and each entry is of 2 words. The last 16 words of the User Area Page are reserved for this.
    // The per-process resource table entry has the following format. Resource Identifier (1 word)	Index of Open File Table/ Semaphore Table entry (1 word)
    // A free entry is denoted by -1 in the Resource Identifier field.

    while(iter < 8) do 
        if([perProcessResouceTable + 2*iter] == -1) then
            freeEntry = iter;
            break;
        endif;
        iter = iter + 1;

    endwhile;

    // If there is no free entry, return -3.
    if(freeEntry == -1) then
        //  return to the user mode with -3 stored as return value indicating Process has reached its limit of resources.
            [returnAddress] = -3;

            goto IRET;

    endif;


    // Call the open() function from the File Manager module to get the Open File table entry.
    multipush(R1,R2,R3,R4,R5,R6,R7);

    multipush(R4);
    // call AQUIRE KERNEL LOCK
    R1 = ACQUIRE_KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R4);

    R1 = OPEN;
    R2 = fileName;
    call FILE_MANAGER;
    multipop(R1,R2,R3,R4,R5,R6,R7);

    // If Open fails, return the error code.
    if(R0 == -1 || R0 == -2 || R0 == -3) then
            //  return to the user mode with the error code stored as return value.
            [returnAddress] = R0;

            goto KERN_IRET;


    endif;


    // Set the Per-Process Resource Table entry
    [perProcessResouceTable + 2*freeEntry] = FILE;
    [perProcessResouceTable + 2*freeEntry + 1] = R0;


    // Return the index of the Per-Process Resource Table entry.   ( success )
    // The index of this entry is the File Descriptor of the file.
    [returnAddress] = freeEntry;
    goto KERN_IRET;
endif;



if(systemCallNum == INT_SEEK || systemCallNum ==  INT_CLOSE) then // seek or close

    //  If file descriptor is invalid, return -1.     File descriptor value should be within the range 0 to 7 (both included). 
    alias fileDescriptor R4;
    if(fileDescriptor<0 || fileDescriptor>7) then
        [returnAddress] = -1;

        
        goto IRET;


    endif;
	
    // Locate the Per-Process Resource Table Entry of the current process.
    alias perProcessResouceTableEntry R6;
    perProcessResouceTableEntry = [processTableEntryAddress + 11]  * 512  + RESOURCE_TABLE_OFFSET + 2*fileDescriptor;


    // If the Resource identifier field of the Per Process Resource Table entry is invalid or does not indicate a FILE, return -1.  
    // No file is open with this file descriptor. 
    if([perProcessResouceTableEntry] == -1 || [perProcessResouceTableEntry] != FILE) then
        [returnAddress] = -1;

        goto IRET;
        
    endif;


    // Get the index of the Open File Table entry from the Per Process Resource Table entry.
    alias openFileTableEntry R7;
    openFileTableEntry = OPEN_FILE_TABLE + [perProcessResouceTableEntry + 1] * 4;
    
    if(systemCallNum == INT_SEEK) then
        // Get the index of the Inode Table entry from the Open File Table entry. ([openFileTableEntry+1])
        alias inodeIndexOfFile R8;
        alias inodeTableEntryAddress R9;
        inodeIndexOfFile = [openFileTableEntry ];

        inodeTableEntryAddress =  INODE_TABLE + inodeIndexOfFile * 16 ;


        // If the exclusive permission is set
            // if the current user is not root (root user ID is 1) and the current user does not own the file and the exclusive permisttion is set
                // return -3 
        if([inodeTableEntryAddress+4] == 0) then
            if( [SYSTEM_STATUS_TABLE] != 1 && [inodeTableEntryAddress+3] != [SYSTEM_STATUS_TABLE] && [inodeTableEntryAddress+4] == EXCLUSIVE) then
                //  return to the user mode with -3 stored as return value indicating failure.
                [returnAddress] = -3;

                goto KERN_IRET;

            endif;
        endif;


        // Acquire the Lock on the File by calling the acquire_inode() function in the Resource Manager module.
        multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9);
        multipush(R8);
        // call AQUIRE KERNEL LOCK
        R1 = ACQUIRE_KERN_LOCK;
        call ACCESS_CONTROL;
        multipop(R8);

        R1 = ACQUIRE_INODE;
        R2 = inodeIndexOfFile;
        R3 = [SYSTEM_STATUS_TABLE + 5*CORE + 1];
        call RESOURCE_MANAGER;
        multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9);

        
        // If acquiring the inode fails, return -1.
        if(R0 == -1) then
            [returnAddress] = -1;
            
            goto KERN_IRET;
            
        endif;

        // Get the Lseek position from the Open File Table entry.([openFileTableEntry+2])


        // Get the physical address curresponding to the logical address of Memory Buffer address given as input.
        alias offset R10;
        offset = [([PTBR + 2* ((userSP - 3) / 512)] * 512) + ((userSP - 3) % 512)] ;
    
        // Check the validity of the given offset 
        //    1. Get the file size of the file from the Inode Table (Use 480 if inode index is "INODE_ROOT").
        alias fileSize R11;
        if(inodeIndexOfFile == INODE_ROOT) then
            fileSize = 480;
        else
            fileSize = [inodeTableEntryAddress + 2];
        endif;


        //    2. If (lseek + the given offset) is less than 0, release_inode() and return -2.
        if([openFileTableEntry+2] + offset < 0 ) then 
            
            
            [returnAddress] = -2;
            
          
            goto KERN_INODE_IRET;

        endif;
        
        // If the given offset is 0,
        // Set lseek value in the Open File Table entry to 0.
        if(offset == 0) then
            [openFileTableEntry+2] = 0;

        else
            if([openFileTableEntry+2]+offset > fileSize) then
                // if lseek+offset is greater than the file size,
                // Set the lseek value to file size.
                [openFileTableEntry+2] = fileSize;

            else
                // if  both of the above condtion is not true
                // Change the lseek value in the Per-Process Resource Table entry to lseek+offset.
                [openFileTableEntry+2] = [openFileTableEntry+2] + offset;

            endif;
        endif;

        //  return to the user mode with 0 stored as return value indicating success.
        [returnAddress] = 0;


        KERN_INODE_IRET:
        //  Release the Lock on the File by calling the release_inode() function in the Resource Manager module.
        // calling RELEASE_INODE
        multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
        R1 = RELEASE_INODE;
        R2 = inodeIndexOfFile;
        R3 = [SYSTEM_STATUS_TABLE + 5*CORE + 1];
        call RESOURCE_MANAGER;
        multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
        goto KERN_IRET;
    endif;

    if(systemCallNum == INT_CLOSE) then // Close
        // Get the index of the Open File Table entry from Per-Process Resource Table entry. ([perProcessResouceTableEntry+1])
        multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
        multipush(R6);
        // call AQUIRE KERNEL LOCK
        R1 = ACQUIRE_KERN_LOCK;
        call ACCESS_CONTROL;
        multipop(R6);

        R1 = CLOSE;
        R2 = [perProcessResouceTableEntry+1];
        call FILE_MANAGER;
        multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);


        // Invalidate the Per-Process Resource Table entry.
        [perProcessResouceTableEntry] = -1;
        [perProcessResouceTableEntry+1] = -1;

        //  return to the user mode with 0 stored as return value indicating success.
        [returnAddress] = 0;
        goto KERN_IRET;

    endif;


endif;

KERN_IRET:
// calling RELEASE KERNEL LOCK
multipush(R3);
R1 = RELEASE_LOCK;
R2 = KERN_LOCK;
call ACCESS_CONTROL;
multipop(R3);
goto IRET;
IRET:
// At any point of return to user, remember to reset the MODE FLAG and change the stack to user stack.
[processTableEntryAddress + 9] = 0;
SP = [processTableEntryAddress + 13];

ireturn;


