// Set the MODE FLAG field in the process table to the system call number which is 7 for write system call.
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 7;

// Store the value of register SP in the UPTR field of the process table entry of the current process.
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;

// Save the value of register SP as userSP.
alias userSP R0;
userSP=SP;

// Initialize SP (kernel stack pointer) to (user area page number)*512 -1.
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

PTBR = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 14];


alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
alias fileDescriptor R4;


physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)]; 
//Retrieve the file descriptor from the user stack, stored at userSP-4.
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
fileDescriptor=[fileDescPhysicalAddr];

if(fileDescriptor != -1) then
    physicalPageNum = [PTBR + 2 * ((userSP - 1)/ 512)]; 
    offset = (userSP - 1) % 512;
    alias retValPhysicalAddr R4;
    retValPhysicalAddr = (physicalPageNum * 512) + offset;
    [retValPhysicalAddr]  = -1;

else
    physicalPageNum = [PTBR + 2 * ((userSP - 3)/ 512)]; 
    offset = (userSP - 3) % 512;
    alias word R4;
    word = [(physicalPageNum * 512) + offset];
  

 
    multipush(R0, R1, R2);
    R1 = TERMINAL_READ;
    R2 = [SYSTEM_STATUS_TABLE+1];
    R3 = word;

    call DEVICE_MANAGER; // (There is no return value for terminal Read.)
    multipop(R0, R1, R2);

    physicalPageNum = [PTBR + 2 * ((userSP - 1)/ 512)]; 
    offset = (userSP - 1) % 512;
    alias retValPhysicalAddr R4;
    retValPhysicalAddr = (physicalPageNum * 512) + offset;
    [retValPhysicalAddr]  = 0;
endif;

// setting the mode flag back to zero
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
// Change SP back to user stack and return to the user mode.
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] ;
ireturn;

