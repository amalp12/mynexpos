
// Function number and current PID are stored in registers R1 and R2. Give meaningful names to these arguments.
alias functionNum R1;
alias currentPID R2;

// Terminal write function has a function number 3. If the functionNum is 3, implement the following steps else return using return statement.

if (functionNum == TERMINAL_WRITE) then
    // Aquire Terminal
    multipush(R1,R2,R3);
    // Store the function number 8 in register R1 and PID of the current process from the System Status table in register R2 (Can use currentPID, as it already contain current PID value).
    R1 = 8; 
    R2 = currentPID;// no use
    call RESOURCE_MANAGER; // MOD_0
    // Ignore the value present in R0 as Acquire Terminal does not have any return value.

    multipop(R1,R2,R3);
    // Print the word in register R3, using the print statement.
    print R3;
    // Release Terminal
    multipush(R1,R2,R3);
    // Store the function number 9 in register R1 and PID of the current process from the System Status table in register R2 (Can use currentPID, as it already contain current PID value).
    R1 = 9; 
    R2 = currentPID;// no use
    call RESOURCE_MANAGER; // MOD_0
    // Ignore the value present in R0 as Acquire Terminal does not have any return value.

    multipop(R1,R2,R3);
    return;

endif;

// Terminal read function
if (functionNum == TERMINAL_READ) then
    // Aquire Terminal
    multipush(R1,R2,R3);
    // Store the function number 9 in register R1 and PID of the current process from the System Status table in register R2 (Can use currentPID, as it already contain current PID value).
    R1 = 9;
    R2 = currentPID;
 
    call RESOURCE_MANAGER; // MOD_0
    
    multipop(R1,R2,R3);

    

    read;

    

    [PROCESS_TABLE+currentPID*16 +4 ] = WAIT_TERMINAL;

    // Invoking the Context Switch Module 
    
    multipush(R1,R2,R3);
    
    call SCHEDULER;

    multipop(R1,R2,R3);

    // The logical address of the word where the data has to be stored is in R3. Convert this logical address to physical address.
    alias logicalAddressOfWord R3;
    alias offset R4;
    alias physicalPageNum R5;
    alias physicalAddress R6;
    offset = R3%512;
    physicalPageNum = [PTBR+(R3/512)*2];
    physicalAddress = physicalPageNum * 512 + offset;

    // Store the value present in input buffer field of process table to the obtained physical address of the word.
    [physicalAddress] = [PROCESS_TABLE+ [SYSTEM_STATUS_TABLE+1]*16+8];
    return;

endif;

return;