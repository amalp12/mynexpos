// load mod 7 (BOOT_MODULE)
loadi(54,67);
loadi(55,68);

//  Load the idle code from disk to memory.
loadi(69,11);



// setting SP To kernel stack
SP = 76*512-1;

// calling boot module
call BOOT_MODULE;

// IDLE
PTBR = PAGE_TABLE_BASE; // 29696 //as PID of idle process is 0
PTLR = 10;

//Library FOR IDLE IS NOT USED
[PTBR+0] = -1;
[PTBR+1] = "0000";
[PTBR+2] = -1;
[PTBR+3] = "0000";


// Heap FOR IDLE IS NOT USED
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

// Code FOR IDLE
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// Stack FOR IDLE 
[PTBR+16] = 70;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";



// PROCESS 0 IDLE

// we are using the first Process Table entry, the PID will be 0. eXpOS kernel is expected to store the PID in the PID field of the process table.
[PROCESS_TABLE +  1] = 0 ;
[PROCESS_TABLE + 4] = RUNNING; 
//  Allocate memory page 76 for kernel stack of idle.
[PROCESS_TABLE +  11] = 76;
[PROCESS_TABLE + 12] = 0; // KPTR
[PROCESS_TABLE + 13] = 8*512; // UPTR
[PROCESS_TABLE + 14] = PAGE_TABLE_BASE; // PTBR 
[PROCESS_TABLE + 15] = 10; // PTLR



// Setting Process ID in System Status Table to 0
[SYSTEM_STATUS_TABLE+1] = 0;

[70 * 512] = [69*512 + 1];
SP = 8*512; //  accessing stack  from the page table using logical address

ireturn; 
 
  

