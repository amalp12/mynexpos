
// Change virtual memory model such that code occupies logical pages 4 and 5 and the stack lies in logical page 8. You will have to modify the user program as well as the os startup code.
// Load the INIT program from the disk to the memory.
// In Disk 65-66 , in memory 7 - 8
loadi(65,7);
loadi(66,8);


//Load the INT10 module from the disk to the memory.
// 35 - 36	Interrupt 10 Routine: Exit	2 in Disk
// 22 - 23	Interrupt 10 Routine: Exit	11264 - 12287 1024 in Memory

loadi(22,35);
loadi(23,36);

// Load the exception handler routine from the disk to the memory.
// 5 - 16	Exception Handler	2
// 2 - 3	Exception Handler	1024 - 2047	1024 in Memory
loadi(2, 15);
loadi(3, 16);


// You need two pages for storing the INIT program code (loaded from disk blocks 7 and 8) and one additional page for stack (why?). Hence, PTLR is set to value 3.
PTBR = PAGE_TABLE_BASE; //29696
PTLR = 10;

// In the page table of INIT, set page numbers 65 and 66 for code and 76 for stack. (Pages 67 - 75 are reserved. See Memory Organisation .) Thus, the first word of each entry must be set to the corresponding physical page number (65 ,66 and 76). Set the second word ( Auxiliary information ) for pages 65 and 66 to "0100" and page 76 to "0110". This sets the code pages "read only" and stack "read/write"


[PTBR+8] = 65; // code
[PTBR+9] = "0100"; // read only
[PTBR+10] = 66; // code
[PTBR+11] = "0100"; // read only
[PTBR+16] = 76; // stack 
[PTBR+17] = "0110"; // read and write


[76*512] = 4*512; // 8 is for the headers plus code starts at 4th page
SP = 8*512; //  accessing stack  from the page table using logical address

ireturn; 


