alias functionNum R1;
alias processId R2;

if(functionNum == FREE_USER_AREA_PAGE) then
    


    // For each entry in the per-process resource table of the process do following -
    // If the resource is valid and is semaphore (check the Resource Identifier field in the per-process resource table), then invoke Release Semaphore function of resource manager module.
    alias count R4;
    alias offset R5;
    alias processTableEntryAddress R6;
    alias perProcessTableEntry R7;
    count  = 0;
    processTableEntryAddress = PROCESS_TABLE + (processId*16);

    while(count<16) do 
        offset =  -16+2*count;
        perProcessTableEntry = (([processTableEntryAddress + 11] + 1) * 512 ) + offset;

        // If the resource is semaphore (check the Resource Identifier field in the per-process resource table), then using the sempahore table index, increment the PROCESS COUNT field in the semaphore table entry.
        if([perProcessTableEntry] == 1) then
            
            //Invoke RELEASE_SEMAPHORE
            multipush(R1, R2, R3, R4, R5, R6, R7);
            R1 = RELEASE_SEMAPHORE;
            R2 = [perProcessTableEntry + 1];
            R3 = processId;
            call RESOURCE_MANAGER;
            multipop(R1, R2, R3, R4, R5, R6, R7);

        endif;

        
        count = count + 1;
    endwhile;

    alias userAreaPageNum R3;
    userAreaPageNum = [PROCESS_TABLE + processId * 16 + 11];

    // Free the user area page by invoking the Release Page function.
    multipush(R0, R1, R2);
    R1 = RELEASE_PAGE; 
    R2 = userAreaPageNum;
    call MEMORY_MANAGER; // Memory Manager 
    multipop(R0, R1, R2);

endif;

if(functionNum == EXIT_PROCESS) then // 3 
    // Invoke the Free Page Table function with same PID to deallocate the page table entries.
    multipush(R0, R1, R2);
    R1 = FREE_PAGE_TABLE;
    R2 = processId;
    call MOD_1;
    multipop(R0, R1, R2);


    // Invoke the Free user Area Page function with the same PID to free the user area page
    multipush(R0, R1, R2);
    R1 = FREE_USER_AREA_PAGE;
    R2 = processId;
    call MOD_1;
    multipop(R0, R1, R2);

    // Set the state of the process as TERMINATED and return to the caller.
    [PROCESS_TABLE + processId * 16 + 4] = TERMINATED;
    


    //  when Exit Process is invoked from Exec system call, it should not wake up the processes waiting for the current process and also should not set the children as orphan processes.
    if([PROCESS_TABLE+processId*16+9] != 9) then
        alias iter R5;
        alias currentProcessAddress R4;

        iter = 0;
        while(iter < MAX_PROC_NUM) do
            currentProcessAddress = PROCESS_TABLE + iter * 16;
            
            // Loop through the process table of all processes and change the state to READY for the processes whose state is tuple (WAIT_PROCESS, current PID)
            if([currentProcessAddress + 4] == WAIT_PROCESS && [currentProcessAddress + 5] == processId) then
                [currentProcessAddress + 4] = READY;
                [currentProcessAddress + 5] = -1;
            endif;

            //  if the PPID of a process is PID of current process, then invalidate PPID field to -1.
            if([currentProcessAddress + 2] == processId) then
                [currentProcessAddress + 2] = -1;
            endif;
            iter = iter + 1;
        endwhile;

        

    endif;
    return;
endif;

if(functionNum == FREE_PAGE_TABLE) then
    // Invalidate the page table entries for the library pages by setting page number as -1 and auxiliary data as "0000" for each entry.
    alias ptbr R3;
    ptbr = [PROCESS_TABLE + processId * 16 + 14];
    [ptbr + 0] = -1;
    [ptbr + 1] = "0000";
    [ptbr + 2] = -1;
    [ptbr + 3] = "0000";

    // For each valid entry in the page table, release the page by invoking the Release Page function and invalidate the entry.
    alias ptlr R4;
    alias count R5;
    ptlr = [PROCESS_TABLE + processId * 16 + 15];
    count = 4;
    while(count < ptlr) do
        alias page R6;
        page = [ptbr + count * 2];
        if(page != -1) then
            multipush(R0, R1, R2, R3, R4, R5, R6);
            R1 = RELEASE_PAGE;
            R2 = page;
            call MOD_2;
            multipop(R0, R1, R2, R3, R4, R5, R6);
            [ptbr + count * 2] = -1;
            [ptbr + count * 2 + 1] = "0000";
        endif;
        count = count + 1;
    endwhile;


    // Go through the heap and stack entries in the disk map table of the process with given PID. If any valid entries are found, invoke the Release Blockfunction in the memory manager module.
    alias diskMapTableEntry R3;
    alias offset R5;
    diskMapTableEntry = [DISK_MAP_TABLE + processId * 10 ];
    offset = 2;
    while(offset < 10) do
        alias blockNum R4;
        blockNum = [diskMapTableEntry + offset];
        if(blockNum != -1) then
            multipush(R0, R1, R2, R3, R4, R5);
            R1 = RELEASE_BLOCK;
            R3 = processId;
            R2 = blockNum;
            call MOD_2;
            multipop(R0, R1, R2, R3, R4, R5);
            // Invalidate all the entries of the disk map table.
            [diskMapTableEntry + offset] = -1;
        endif;
        offset = offset + 1;
    endwhile;
    
endif;

    


if(functionNum == GET_PCB_ENTRY) then // 1

    // No arguments
    alias processID R0; 
    alias count R3;
    alias state R4;
    processID =-1;
    count = 0;
    while(count<16)do
        state = [PROCESS_TABLE + count * 16 + 4];
        if(state == TERMINATED) then
            alias process_table_entry R5;
            process_table_entry = PROCESS_TABLE + count * 16;
            [process_table_entry + 1] = count;
			[process_table_entry + 4] = ALLOCATED;
			[process_table_entry + 14] = PAGE_TABLE_BASE + (count * 20);
			[process_table_entry + 15] = 10;
            processID = count;
            break;
        endif;
        count = count+1;
    endwhile;
   
endif;

return;