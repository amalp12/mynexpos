//Function number is present in R1 and PID passed as an argument is stored in R2. Give meaningful names to these registers to use them further.
alias functionNum R1;
alias currentPID R2;

if(functionNum == ACQUIRE_TERMINAL) then // Aquire Terminal
    while([TERMINAL_STATUS_TABLE]==1) do
        [PROCESS_TABLE +16*currentPID+ 4] = WAIT_TERMINAL; 
        multipush(R1,R2);
        call SCHEDULER;
        multipop(R1,R2);
    endwhile;
    [TERMINAL_STATUS_TABLE]=1;
    [TERMINAL_STATUS_TABLE+1] = currentPID;
    return;
endif;

if(functionNum == RELEASE_TERMINAL) then // Release Terminal
    if(currentPID !=  [TERMINAL_STATUS_TABLE+1]) then
        R0=-1;
        return;
    else 
        [TERMINAL_STATUS_TABLE]=0;
        alias iter R5;
        iter = 1;
        while(iter <  16) do
            if (([PROCESS_TABLE +16*iter+ 4] == WAIT_TERMINAL)) then
                [PROCESS_TABLE +16*iter+ 4] = READY;
            endif;
            iter=iter+1;
        endwhile;
        R0=0;
        return;
    endif;
endif;

if(functionNum == ACQUIRE_DISK) then // Aquire Disk 
    while([DISK_STATUS_TABLE]==1) do
        [PROCESS_TABLE +16*currentPID+ 4] = WAIT_DISK; 
        multipush(R1,R2);
        call SCHEDULER;
        multipop(R1,R2);
    endwhile;
    [DISK_STATUS_TABLE]=1;
    [DISK_STATUS_TABLE+4] = currentPID;
    return;
endif;
return;

if(functionNum == ACQUIRE_SEMAPHORE) then // Aquire Semaphore 
    // PID is in R2 register

    alias count R3;
    alias semaphoreTableEntryAddress R4;
    alias freeSemaphore R0;
    count =0;
    freeSemaphore = -1;

    while(count <  MAX_SEM_COUNT) do // 32

        // Each semaphore table entry is of size 4 words of which the last two are unused.
        // LOCKING PID (1 word)- specifies the PID of the process which has locked the semaphore. The entry is set to -1 if the semaphore is not locked by any processes.
        // PROCESS COUNT (1 word) - specifies the number of processes which are sharing the semaphore. A value of 0 indicates that the semaphore has not been acquired by any process.
        // Unused (2 words)

        semaphoreTableEntryAddress = SEMAPHORE_TABLE + count * 4;

        // A free entry in the semophore table is indicated by process count 0
        if([semaphoreTableEntryAddress+1] == 0) then
            freeSemaphore = count;
            break;
        endif;
        count = count +1;
    endwhile;

    // if no free entry return -1
    if(freeSemaphore == -1) then
        return;
    endif;

    [semaphoreTableEntryAddress] = -1; //  LOCKING_PID
    [semaphoreTableEntryAddress+1] = 1; // PROCESS_COUNT

    return;

endif;

if(functionNum == RELEASE_SEMAPHORE) then // Release Semaphore 
    alias semaphoreTableIndex R2;
    alias currentPID R3;
    alias semaphoreTableEntryAddress R4;

    semaphoreTableEntryAddress = SEMAPHORE_TABLE + semaphoreTableIndex * 4;

    // If the semaphore is locked by the current proces (Check the Locking PID in the Semaphore table)
    if([semaphoreTableEntryAddress] == currentPID) then
        //  Set the Locking PID to -1. (Unlock the semaphore before release )
        [semaphoreTableEntryAddress] = -1;

        // loop through the process table and check if any process is waiting for the semaphore and change it to ready
        alias iter R5;
        iter = 0;
        while(iter <  16) do
            if (([PROCESS_TABLE +16*iter+ 4] == WAIT_SEMAPHORE && [PROCESS_TABLE +16*iter+ 5] == semaphoreTableIndex )) then
                [PROCESS_TABLE +16*iter+ 4] = READY;
            endif;
            iter=iter+1;
        endwhile;

        // Decrement the process count of the semaphore in the semaphore table.
        [semaphoreTableEntryAddress+1] = [semaphoreTableEntryAddress+1] -1; //  When the count becomes 0, the semaphore is free. 
        R0 = 0;
    else 
        R0 = -1;
    endif;

    return;

endif;